{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Print to console": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "clg",
    "body": [
      "console.log($1);$2"
    ],
    "description": "Log output to console"
  },
  "Pretty print to console": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "pprint",
    "body": [
      "console.log('==>', JSON.stringify($1, null, 2));$2"
    ],
    "description": "Pretty print object to console"
  },
  "graphql query": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "gql-query",
    "body": [
      "export const $1 = gql`",
			"\t${2|query,mutation|} $1 {",
			"\t\t$3 {",
			"\t\t\tid$4",
			"\t\t}",
			"\t}",
			"`;",
			"$0"
    ],
    "description": "graphql query"
  },
  "graphql query with params": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "gql-query-params",
    "body": [
      "export const $1 = gql`",
			"\t${2|query,mutation|} $1(\\$id: Int!) {",
			"\t\t$3(id: \\$id) {",
			"\t\t\tid$4",
			"\t\t}",
			"\t}",
			"`;",
			"$0"
    ],
    "description": "graphql query with params"
	},
  "apollo useQuery": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "useQuery-apollo",
    "body": [
      "const { loading, error, data } = useQuery($1);",
			"$0"
    ],
    "description": "apollo useQuery"
	},
  "apollo useMutation": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "useMutation-apollo",
    "body": [
      "const [add$2, { loading, error, data }] = useMutation($1);",
			"$0"
    ],
    "description": "apollo useQuery"
	},
	"typeScriptArrowFunctionalComponent": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "tsrfa",
    "body": [
      "import React from 'react';",
      "",
      "interface Props {}",
      "",
      "const ${1:${TM_FILENAME_BASE}}: React.FC<Props> = () => {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t);",
      "};",
      "",
      "export default ${1:${TM_FILENAME_BASE}};",
      ""
    ],
    "description": "Creates a React Arrow Functional Component with TypeScript interface"
  }
}
